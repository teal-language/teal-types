#!/usr/bin/env tl run

local record Func
	method: boolean
	name: string
	parameters: {{string}}
	return_type: string
	since: number
	deprecated_since: number
end
local record Type
	id: number
	prefix: string
end
local record UI_Event
	name: string
	parameters: {{string}}
	since: string
end

local record Info
	error_types: {string:{string:number}}
	functions: {Func}
	types: {string:Type}
	ui_events: {{UI_Event}}
	ui_options: {string}
	record Version
		api_compatible: number
		api_level: number
		api_prerelease: boolean
		major: number
		minor: number
		patch: number
	end
	version: Version
end
local api_info: Info = require("api_info") as Info


local typeMap: {string:string} = setmetatable({
	["String"] = "string",
	["Number"] = "number",
	["Float"] = "number",
	["Integer"] = "number",
	["Boolean"] = "boolean",
	["Buffer"] = "number",
	["Window"] = "number",
	["Dictionary"] = "{string:any}",
}, {
	__index = function(_: table, k: string): string
		return "any"
	end
})

local function getTypeName(name: string): string
	local tname: string
	if name:match("ArrayOf") then
		local arrayType = name:gsub("ArrayOf%((.*)%)", "%1")
		if arrayType:find(",") then
			tname = "{" .. typeMap[arrayType:match("(.*),")] .. "}"
		else
			tname = "{" .. typeMap[arrayType] .. "}"
		end
	else
		tname = typeMap[name]
	end
	return tname .. "--[[" .. name .. "]]"
end

local ins = table.insert
local buf: {string} = {}
local deprecatedList: {string} = {}
local nonDeprecatedList: {string} = {}

ins(buf, "local record api")
ins(buf, "   --[[INFORMATION]]--\n")
ins(buf, "   --[[api compatible: " .. api_info.version.api_compatible .. "]]--")
ins(buf, "   --[[api level: " .. api_info.version.api_level .. "]]--")
ins(buf, "   --[[api api_prerelease: " .. tostring(api_info.version.api_prerelease) .. "]]--")
ins(buf, "   --[[api major: " .. api_info.version.major .. "]]--")
ins(buf, "   --[[api minor: " .. api_info.version.minor .. "]]--")
ins(buf, "   --[[api patch: " .. api_info.version.patch .. "]]--\n")

ins(buf, "   --[[BEGIN AUTOGENERATED TYPES]]--\n")

local typeArray: {{string}} = {}
for k, v in pairs(typeMap) do
	table.insert(typeArray, {k, v})
end
table.sort(typeArray, function(a: {string}, b: {string}): boolean
	return a[1] < b[1]
end)
ins(buf, "   --[[Vim Type -> Teal Type]]--")
ins(buf, "   --[[=====================]]--\n")
for i, v in ipairs(typeArray) do
	ins(buf, "      --[[" .. v[1] .. " -> " .. v[2] .. "]]--")
end
ins(buf, "   --[[none of the above -> any]]--\n")

ins(buf, "   --[[Found " .. #(api_info.functions) .. " functions]]--")
for deprecated = 0, 1 do
	for i, f in ipairs(api_info.functions) do
		if (f.deprecated_since and deprecated == 0) or (not f.deprecated_since and deprecated == 1) then
			goto continue
		end
		local line: {string} = {}
		ins(line, "   ")
		ins(line, f.name)
		ins(line, ": function(")
		for idx, param in ipairs(f.parameters) do
			ins(line, getTypeName(param[1]))
			if idx < #f.parameters then
				ins(line, ", ")
			end
		end
		ins(line, ")")
		if f.return_type and f.return_type ~= "void" then
			ins(line, ": ")
			ins(line , getTypeName(f.return_type))
		elseif f.return_type == "void" then
			ins(line, "--[[void]]")
		end
		if deprecated == 0 then
			ins(nonDeprecatedList, table.concat(line))
		else
			ins(deprecatedList, table.concat(line))
		end

		::continue::
	end
end
local comp = function(a: string, b: string): boolean
	return a < b
end
table.sort(deprecatedList, comp)
table.sort(nonDeprecatedList, comp)
ins(buf, table.concat(nonDeprecatedList, "\n"))
ins(buf, "\n   --[[DEPRECATED]]--")
ins(buf, table.concat(deprecatedList, "\n"))
ins(buf, "   --[[END DEPRECATED]]--\n")
ins(buf, "   --[[END AUTOGENERATED TYPES]]--")
ins(buf, "end\n")
ins(buf, "return api\n")

io.write(table.concat(buf, "\n"))
